{"version":3,"sources":["logo.svg","Components/Header.js","Components/Paragraph.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","styles","backgroundColor","textAlign","fontSize","Header","state","manejaClick","props","name","manejaEstado","setState","this","className","onClick","src","logo","alt","href","target","style","Component","stylesP","color","padding","Paragraph","cambiarColor1","console","log","App","text","cambiarTextoState","elemento","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6GAAAA,EAAOC,QAAU,IAA0B,kC,qMCOrCC,EACS,SAACC,GAAD,MAAsB,CAC7BA,kBACAC,UAAW,SACXC,SAAU,WAIZC,E,4MAEFC,MAAQ,CACJJ,gBAAiB,W,EAGrBK,YAAc,WAAO,IAAD,EACc,EAAKC,OACnCD,EAFgB,EACRA,aADQ,EACKE,O,EAIzBC,aAAe,WACX,EAAKC,SAAS,CAAET,gBAAiB,a,uDAG3B,IACEA,EAAoBU,KAAKN,MAAzBJ,gBAGR,OACI,4BAAQW,UAAU,cACd,yBAAKC,QAASF,KAAKL,YAAaQ,IAAKC,IAAMH,UAAU,WAAWI,IAAI,SACpE,wBAAIJ,UAAU,aAAd,sBACA,uBAAGK,KANG,0BAMUL,UAAU,WAAWM,OAAO,SAA5C,iBACA,uBAAGC,MAAOnB,EAAiBC,GAAkBY,QAASF,KAAKF,cAA3D,uCAA8GE,KAAKJ,MAAMC,W,GAxBpHY,a,OCXfC,EACM,SAACpB,EAAiBqB,GAAlB,MAA6B,CACjCrB,kBACAE,SAAU,OACVmB,QACAC,QAAS,SAIXC,E,4MAGFnB,MAAQ,CACJJ,gBAAiB,MACjBqB,MAAO,S,EAGXG,cAAgB,WACZC,QAAQC,IAAR,gBACA,EAAKjB,SAAS,CAAET,gBAAiB,OAAQqB,MAAO,W,uDAG1C,IAAD,EAC8BX,KAAKN,MAAhCJ,EADH,EACGA,gBAAiBqB,EADpB,EACoBA,MACzB,OACI,qCAAGH,MAAOE,EAAepB,EAAiBqB,IAAYX,KAAKJ,MAA3D,CAAkEM,QAASF,KAAKc,qB,GAhBpEL,aCqBTQ,G,kNA1BbvB,MAAQ,CACNwB,KAAM,0B,EAGRC,kBAAoB,WAClB,EAAKpB,SAAS,CAAEmB,KAAM,gB,EAGxBvB,YAAc,SAACyB,GACbL,QAAQC,IAAR,UAAeI,EAAf,wB,uDAGQ,IAEAF,EAASlB,KAAKN,MAAdwB,KACArB,EAASG,KAAKJ,MAAdC,KACR,OACE,yBAAKI,UAAU,OACb,kBAAC,EAAD,CAAQJ,KAAMA,EAAMF,YAAaK,KAAKL,cACtC,kBAAC,EAAD,CAAWO,QAASF,KAAKmB,mBACtBD,Q,GAtBOT,cCMEY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,CAAK/B,KAAM,kBAEbgC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,c","file":"static/js/main.4eb0a61b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\nimport logo from '../logo.svg';\r\n\r\n/* Style\r\n    \r\n*/\r\n\r\nconst styles = {\r\n    paragraph: (backgroundColor) => ({\r\n        backgroundColor,\r\n        textAlign: 'center',\r\n        fontSize: '2.5rem'\r\n    })\r\n}\r\n\r\nclass Header extends Component {\r\n\r\n    state = {\r\n        backgroundColor: '#e2e2e2',\r\n    }\r\n\r\n    manejaClick = () => {\r\n        const { manejaClick, name } = this.props;\r\n        manejaClick(name);\r\n    }\r\n\r\n    manejaEstado = () => {\r\n        this.setState({ backgroundColor: '#5A60F3' });\r\n    }\r\n\r\n    render() {\r\n        const { backgroundColor } = this.state;\r\n        const react = 'https://es.reactjs.org/';\r\n\r\n        return (\r\n            <header className=\"App-header\">\r\n                <img onClick={this.manejaClick} src={logo} className=\"App-logo\" alt=\"logo\" />\r\n                <h1 className=\"App-title\">Bienvenido a React</h1>\r\n                <a href={react} className=\"App-link\" target=\"blank\">Aprende React</a>\r\n                <p style={styles.paragraph(backgroundColor)} onClick={this.manejaEstado}>Este mensaje viene desde una props: {this.props.name}</p>\r\n            </header>\r\n        )\r\n    }\r\n}\r\n\r\nexport {\r\n    Header\r\n}","import React, { Component } from 'react';\r\n\r\n/*Styles */\r\n\r\nconst stylesP = {\r\n    pStyle: (backgroundColor, color) => ({\r\n        backgroundColor,\r\n        fontSize: '1rem',\r\n        color,\r\n        padding: '1rem'\r\n    })\r\n}\r\n\r\nclass Paragraph extends Component {\r\n\r\n\r\n    state = {\r\n        backgroundColor: 'red',\r\n        color: 'white'\r\n    }\r\n\r\n    cambiarColor1 = () => {\r\n        console.log(this);\r\n        this.setState({ backgroundColor: '#ff0', color: 'black' })\r\n    }\r\n\r\n    render() {\r\n        const { backgroundColor, color } = this.state;\r\n        return (\r\n            <p style={stylesP.pStyle(backgroundColor, color)} {...this.props} onClick={this.cambiarColor1} />\r\n        );\r\n    }\r\n}\r\n\r\nexport {\r\n    Paragraph\r\n}","import React, { Component } from 'react';\nimport { Header } from './Components/Header.js';\nimport { Paragraph } from './Components/Paragraph.js';\nimport './App.css';\n\n\nclass App extends Component {\n\n  state = {\n    text: 'Bienvenido Juan Ospina'\n  }\n\n  cambiarTextoState = () => {\n    this.setState({ text: 'Hola Mundo' });\n  }\n\n  manejaClick = (elemento) => {\n    console.log(`${elemento} ha sido clickeado`);\n  }\n\n  render() {\n\n    const { text } = this.state;\n    const { name } = this.props;\n    return (\n      <div className=\"App\">\n        <Header name={name} manejaClick={this.manejaClick} />\n        <Paragraph onClick={this.cambiarTextoState}>\n          {text}\n        </Paragraph>\n      </div >\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App name={'Juan Esteban'} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}